name: Coverity Dev

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

  workflow_dispatch:

jobs:
  build:
    runs-on: [self-hosted]

    env:
      # The following variables must be configured in your GitHub project or
      # organization settings:
      #   COVERITY_URL: URL to Coverity Connect
      #   COVERITY_USER: Username to authenticate to Coverity Connect
      #   COVERITY_LICENSE: The text contents of your license.dat that will be
      #     passed to the Coverity analysis software.
      COVERITY_URL: ${{ secrets.COVERITY_URL }}
      COV_USER: ${{ secrets.COVERITY_USER }}
      COVERITY_PASSPHRASE: ${{ secrets.COVERITY_PASSPHRASE }}
      COVERITY_LICENSE: ${{ secrets.COVERITY_LICENSE }}
      # Some Coverity command line utilities are not found in the bin
      # directory. Configure the COVERITY_HOME here:
      # Note: currently set to JBC VM
      COVERITY_HOME: /home/runner/cov-analysis-linux64
      # The SECURITY_GATE_VIEW must be configured in Coverity Connect
      # to include the filter criteria for failing a build.
      SECURITY_GATE_VIEW: OWASP Web Top 10
      # The COVERITY_CHECKERS specifies what analysis options are passed
      # to the Coverity analysis software.
      COVERITY_CHECKERS: --all --webapp-security
      # The SYNOPSYS_GITHUB_TOOLS_REPO specifies the repository from which
      # to download the supportive Python scripts for this configuration.
      SYNOPSYS_GITHUB_TOOLS_REPO: https://github.com/synopsys-sig-community/synopsys-github-tools

    steps:
      # First check out the code. Note this is a shallow checkout, for the
      # version of code being built.
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '16'

      # Fetch scripts for automating GitHub tasks from another repository.
      # Also set up necessary Python dependencies.
      - name: Get Synopsys GitHub Tools
        run: |
          git clone -q --depth 1 $SYNOPSYS_GITHUB_TOOLS_REPO
          # Not needed on james-mac
          #pip3 install --upgrade pandas requests==2.26.0 urllib3==1.26.7 jsonapi-requests==0.6.2 tenacity==6.2.0 pygithub
      # Save the Coverity license from a GitHub Secret to a file in order to pass to the Coverity tools
      - name: Coverity License
        run: |
          echo $COVERITY_LICENSE > coverity-license.dat
      # Create streams and projects in Coverity Connect if they do not
      # already exist. This requires that the user credentials used has
      # permission to create streams.
      #
      # The stream name is based on the repo name (not including the owner
      # or organization) with the branch name appended.
      #
      # A project is necessary for the security gate to work, as it must
      # reference a project when opening the saved view.
      - name: Create Coverity Stream
        if: ${{github.event_name == 'push'}}
        # TODO: Should this only run for main, other specific names?
        run: |
          env
          export COVERITY_STREAM_NAME=${GITHUB_REPOSITORY##*/}-${GITHUB_REF##*/}
          echo Ensure that stream "$COVERITY_STREAM_NAME" exists
          cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode projects --add --set name:"$COVERITY_STREAM_NAME" || true
          cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode streams --add -set name:"$COVERITY_STREAM_NAME" || true
          cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode projects --update --name "$COVERITY_STREAM_NAME" --insert stream:"$COVERITY_STREAM_NAME"
      # On pushes to a main branch, run a Full Coverity analysis using auto
      # capture. This will scan the filesystem to determine what kind of
      # project(s) are present and how to capture them for analysis.
      #
      # The results will be committed to the stream specified in the
      # previous step.
      #
      # Results will be saved into coverity-full-results.json for
      # potential processing.
      - name: Coverity Scan (Full analysis)
        if: ${{github.event_name == 'push'}}
        run: |
          export COVERITY_STREAM_NAME=${GITHUB_REPOSITORY##*/}-${GITHUB_REF##*/}
          #cov-capture --dir idir --project-dir .
          cov-configure --java
          cov-build --dir idir ./mvnw clean compile -Dmaven.test.skip=true -Dcheckstyle.skip=true
          cov-analyze --dir idir --strip-path `pwd` --security-file coverity-license.dat $COVERITY_CHECKERS
          $COVERITY_HOME/bin/sigma analyze
          cov-commit-defects --dir idir --security-file coverity-license.dat --ticker-mode none --url $COVERITY_URL --on-new-cert trust --stream $COVERITY_STREAM_NAME --scm git --description "GitHub Workflow $GITHUB_WORKFLOW for $GITHUB_REPO" --version $GITHUB_SHA
          cov-format-errors --dir idir --security-file coverity-license.dat --json-output-v8 coverity-full-results.json
      # Generate SARIF using Coverity's built-in tool. Note that this is not
      # included in the regular Coverity PATH, so the full path must be
      # specified here.
      - name: Export Coverity Results to SARIF (Full)
        run: |
          node $COVERITY_HOME/SARIF/cov-format-sarif-for-github.js \
            --inputFile coverity-full-results.json \
            --repoName $GITHUB_REPOSITORY \
            --checkoutPath $GITHUB_REPOSITORY `pwd` $GITHUB_SHA \
            --outputFile synopsys-coverity-github-sarif.json
        if: ${{github.event_name == 'push'}}

      # Use the helpful Jitterbit Get Changed Files action to determine
      # what files have been added or modified.
      - name: Get Pull Request Changeset
        if: ${{ github.event_name == 'pull_request' }}
        id: changeset
        uses: jitterbit/get-changed-files@v1

      # On a pull request, run an incremental analysis. This uses auto
      # capture as well, and references a stream that was presumably
      # created in advance by a push to this repo, using the stream name
      # based on the repository and main branch name (e.g. "main").
      #
      # Results are saved into coverity-incremental-results.json.
      - name: Coverity Scan (Incremental analysis)
        if: ${{github.event_name == 'pull_request'}}
        run: |
          export COVERITY_STREAM_NAME=${GITHUB_REPOSITORY##*/}-$BASE_BRANCH
          for changed_file in ${{ steps.changeset.outputs.added_modified }}; do
            echo ${changed_file} >> coverity-files-to-scan.txt
            echo "Scan changed file ${changed_file}."
          done
          cov-capture --dir idir --source-list coverity-files-to-scan.txt
          cov-run-desktop --dir idir --strip-path `pwd` --url $COVERITY_URL --stream $COVERITY_STREAM_NAME --present-in-reference false \
            --ignore-uncapturable-inputs true \
            --security-file coverity-license.dat \
            --json-output-v7 coverity-incremental-results.json \
            ${{ steps.changeset.outputs.added_modified }}
          $COVERITY_HOME/bin/sigma analyze
        env:
          BASE_BRANCH: ${{ github.base_ref }}

      - name: Coverity SARIF Generation (Incremental analysis)
        if: ${{github.event_name == 'pull_request'}}
        run: |
          node $COVERITY_HOME/SARIF/cov-format-sarif-for-github.js \
            --inputFile coverity-incremental-results.json \
            --repoName $GITHUB_REPOSITORY \
            --checkoutPath $GITHUB_REPOSITORY `pwd` $GITHUB_SHA \
            --outputFile synopsys-coverity-github-sarif.json
      - name: Comment on pull request (Incremental)
        run: |
          export COVERITY_STREAM_NAME=${GITHUB_REPOSITORY##*/}-$BASE_BRANCH
          git fetch --unshallow
          python3 ./synopsys-github-tools/github-coverity-comment-on-pull-request.py \
            --coverity-json coverity-incremental-results.json \
            --url $COVERITY_URL \
            --stream $COVERITY_STREAM_NAME \
            --debug 9 \
            --sigma-json ./sigma-results.json
        if: ${{github.event_name == 'pull_request'}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_BRANCH: ${{ github.base_ref }}

      #- name: Upload SARIF file
      #  uses: github/codeql-action/upload-sarif@v1
      #  with:
      #    # Path to SARIF file relative to the root of the repository
      #    sarif_file: synopsys-coverity-github-sarif.json

      - name: Coverity Security Gate
        if: ${{github.event_name == 'push'}}
        run: |
          COVERITY_STREAM_NAME=${GITHUB_REPOSITORY##*/}-${GITHUB_REF##*/}
          COVERITY_VIEW_ESCAPED=`jq -rn --arg x "$SECURITY_GATE_VIEW" '$x|@uri'`
          curl -kfLsS --user $COV_USER:$COVERITY_PASSPHRASE $COVERITY_URL/api/viewContents/issues/v1/$COVERITY_VIEW_ESCAPED?projectId=$COVERITY_STREAM_NAME > security-gate-results.json
          if [ $(cat security-gate-results.json | jq .viewContentsV1.totalRows) -ne 0 ]; then cat security-gate-results.json | jq .viewContentsV1.rows; exit 1; fi
